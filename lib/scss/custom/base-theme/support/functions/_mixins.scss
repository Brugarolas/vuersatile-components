/**
Aux function for ::after and ::before
*/
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

/**
We use this for creating scalable elements (usually images / background images) that maintain a ratio. 

div {
    @include responsive-ratio(16,9);
}
*/
@mixin responsive-ratio($x, $y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

/**
This mixin takes all the hassle out of creating that triangle you'll see coming out of most traditional tooltips,
all without images, you just specify it's colour, how big you want it, the direction it's going to come out of
your element and you're done
**/
@mixin triangle ($size, $color, $direction) {
    height: 0;
    width: 0;

    $width: nth($size, 1);
    $height: nth($size, length($size));

    $foreground-color: nth($color, 1);
    $background-color: if(length($color) == 2, nth($color, 2), transparent);

    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
        $width: math.div($width, 2);
        $height: if(length($size) > 1, $height, math.div($height, 2));

        @if $direction == up {
            border-bottom: $height solid $foreground-color;
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
        } @else if $direction == right {
            border-bottom: $width solid $background-color;
            border-left: $height solid $foreground-color;
            border-top: $width solid $background-color;
        } @else if $direction == down {
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
            border-top: $height solid $foreground-color;
        } @else if $direction == left {
            border-bottom: $width solid $background-color;
            border-right: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }
    } @else if ($direction == up-right) or ($direction == up-left) {
        border-top: $height solid $foreground-color;
        @if $direction == up-right {
            border-left:  $width solid $background-color;
        } @else if $direction == up-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == down-right) or ($direction == down-left) {
        border-bottom: $height solid $foreground-color;
        @if $direction == down-right {
            border-left:  $width solid $background-color;
        } @else if $direction == down-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    } @else if ($direction == inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $width $height;
    }
}

/**
Simple and effective for when you need to trigger hardware acceleration for some animation, keeping everything fast, slick and flicker-free.
*/
@mixin hardware-acceleration($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

/**
This mixin lets you achieve a concept commonly known as fluid-type,
the concept is to linearly increase (or decrease) font-size between 2 breakpoints.

.example {
    @fluid(16px, 24px, 320px, 1200px)
}

That would scale font-size from a minimum of 16px (at a 320px viewport) to a maximum of 24px (at a 1200px viewport).
*/
@mixin fluid-typography ($min-font-size, $max-font-size, $min-vw, $max-vw) {
    font-size: $min-font-size;

    @media screen and (min-width: #{$min-vw}) {
        font-size: calc(#{$min-font-size} + #{stripUnit($max-font-size - $min-font-size)} * (100vw - #{$min-vw}) / #{stripUnit($max-vw - $min-vw)});
    }

    @media screen and (min-width: #{$max-vw}) {
        font-size: $max-font-size;
    }
}

/**
This mixin is the same as the previous but it lets you increase any property,
not just font-size.
*/
@mixin fluid-properties ($min-value, $max-value, $min-vw, $max-vw, $properties...) {
    @each $property in $properties {
        #{$property}: $min-value;
    }

    @media only screen and (min-width: #{$min-vw}) {
        @each $property in $properties {
            #{$property}: calc(#{$min-value} + #{stripUnit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{stripUnit($max-vw - $min-vw)});
        }
    }

    @media only screen and (min-width: #{$max-vw}) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}
